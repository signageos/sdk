image: $CI_REGISTRY/signageos/docker-node:20-alpine-build

stages:
  - prepare
  - test
  - build
  - publish
  - release

cache:
  untracked: true
  key: "$CI_PROJECT_ID"
  paths:
    - node_modules/

before_script:
  - export VERSION=`cat ./VERSION`
  - export TAG=`cat ./PRERELEASE`
  - npx --userconfig ./.npmrc @signageos/lib-ci@latest version-upgrade $VERSION
  - mkdir -p dist
  - npm install

prepare:
  image: $CI_REGISTRY/signageos/docker:master
  stage: prepare
  before_script: []
  script:
    - ci-prepare
  artifacts:
    when: on_success
    paths:
      - ./VERSION
      - ./PRERELEASE

test:general:
  stage: test
  except:
    - tags
  needs:
    - prepare
  artifacts:
    expire_in: 1 week
    name: tests-coverage
    when: always
    paths:
      - coverage/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  script:
    - cp .env.automated.test .env
    - npm install
    - npm run test:coverage

test:e2e:
  stage: test
  only:
    variables:
      - $TEST_E2E == "1"
  needs:
    - prepare
  script:
    - cp .env.automated.test .env
    - npm install
    - npm run test:e2e

test:lint:
  stage: test
  except:
    - tags
  script:
    - if [ `find tests -name '*\.ts' -type f -print0 | xargs -0 grep "\.only" | wc -l` -gt 0 ]; then echo "You forgot the .only in tests" && exit 1; fi
    - npm run lint
  needs:
    - prepare

test:changelog:
  image: $CI_REGISTRY/signageos/docker:master
  stage: test
  except:
    - tags
  allow_failure: true
  script:
    - ci-test-changelog
  needs:
    - prepare

test:check:
  stage: test
  except:
    - tags
  script:
    - npm run check
  needs:
    - prepare

build:
  stage: build
  needs:
    - prepare
  script:
    - npm run clean-build --production
  artifacts:
    when: on_success
    paths:
      - dist/

publish:npm:
  stage: publish
  needs:
    - prepare
    - build
  script:
    - cp .env.production .env
    - npm publish --tag $TAG

publish:npm-public:
  stage: publish
  only:
    - tags
  needs:
    - prepare
    - build
  script:
    - cp .env.production .env
    - export NPM_REGISTRY_URL=https://registry.npmjs.org/
    - export NPM_REGISTRY_HOST=registry.npmjs.org
    - export NPM_AUTH_TOKEN=$PUBLIC_NPM_AUTH_TOKEN
    - node -e 'require("fs").writeFileSync("./package.json", JSON.stringify({ ...require("./package"), "publishConfig":{"registry":"https://registry.npmjs.org/","access":"public" } }, undefined, 2) + "\n")'
    - npm publish --tag $TAG

publish:docs:
  stage: publish
  only:
    - tags
  environment:
    name: docs
    url: https://public.docs.signageos.io/sdk/latest/index.html
  needs:
    - prepare
    - build
  script:
    - apk add --no-cache aws-cli
    - npm i && npm run docs
    - echo $AWS_ALPINE_REPO_S3_PATH
    - aws s3 cp ./docs "s3://signageos-documentation/sdk/$TAG" --recursive
    - rm -rf ./docs

release:tag:
  image: $CI_REGISTRY/signageos/docker:master
  stage: release
  only:
    - master
  when: manual
  allow_failure: false
  before_script: []
  script:
    - ci-release-tag
  needs:
    - prepare
    - build
    - test:general
    - test:lint
    - test:check
    - test:changelog

release:notes:
  image: $CI_REGISTRY/signageos/docker:master
  stage: release
  only:
    - tags
  script:
    - ci-release-notes
  needs:
    - prepare
    - publish:npm
